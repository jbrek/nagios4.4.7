###############################################################################
# WINDOWS.CFG - SAMPLE CONFIG FILE FOR MONITORING A WINDOWS MACHINE
#
#
# NOTES: This config file assumes that you are using the sample configuration
#    files that get installed with the Nagios quickstart guide.
#
###############################################################################



###############################################################################
#
# HOST DEFINITIONS
#
###############################################################################

# Define a host for the Windows machine we'll be monitoring
# Change the host_name, alias, and address to fit your situation

define host {

    use                     windows-server          ; Inherit default values from a template
    host_name               WinSrv01           ; The name we're giving to this host
    alias                   WinSrv01       ; A longer name associated with the hos
    address                 192.168.1.100             ; IP address of the host
}



###############################################################################
#
# HOST GROUP DEFINITIONS
#
###############################################################################

# Define a hostgroup for Windows machines
# All hosts that use the windows-server template will automatically be a member of this group

define hostgroup {

    hostgroup_name          windows-servers         ; The name of the hostgroup
    alias                   Windows Servers         ; Long name of the group
}



###############################################################################
#
# SERVICE DEFINITIONS
#
###############################################################################

# Create a service for monitoring the version of NSCLient++ that is installed
# Change the host_name to match the name of the host you defined above

define service{
    use                 generic-service
    host_name           WinSrv01
    service_description CPU Load
    check_command       check_nrpe!check_cpu -a "warn=load > 80" "crit=load > 90"
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description Memory
    check_command       check_nrpe!check_memory -a "warn=free < 20%" "crit=free < 10G"
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description Network
    check_command       check_nrpe!check_network
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description OS
    check_command       check_nrpe!check_os_version
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description Pagefile
    check_command       check_nrpe!check_pagefile
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description Services
    check_command       check_nrpe!check_service
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description Uptime
    check_command       check_nrpe!check_uptime
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description Firewall
    check_command       check_nrpe!check_firewall
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description WMI OS
    check_command       check_nrpe!check_wmi -a "query=Select Version,Caption from win32_OperatingSystem"
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description WMI DiskQue
    check_command       check_nrpe!check_wmi -a "query=select Name, AvgDiskQueueLength from Win32_PerfFormattedData_PerfDisk_PhysicalDisk" "warn=AvgDiskQueueLength>0" "crit=AvgDiskQueueLength>2" "perf-syntax=%(Name)" "perf-config=*(prefix:'time')"
}
define service{
    use                 generic-service
    host_name           WinSrv01
    service_description PHD TCPv4 Segments 
    check_command       check_nrpe!check_pdh -a "counter=\\TCPv4\Segments Received/sec" "counter=\\TCPv4\Segments Sent/sec" "warn=value > 10" "crit=value > 25"
}


